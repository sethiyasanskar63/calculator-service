# This workflow builds, tests, and creates a Docker image for the Calculator microservice
# It runs on every push to main branch and on pull requests

name: CI/CD Pipeline

# STEP 1: Define when this workflow should run
on:
  push:
    branches: [ main, master ]  # Run on push to main/master branch
  pull_request:
    branches: [ main, master ]  # Run on pull requests to main/master
  workflow_dispatch:            # Allow manual trigger from GitHub UI

# STEP 2: Define environment variables used across all jobs
env:
  JAVA_VERSION: '21'                    # Java version to use
  MAVEN_OPTS: -Xmx1024m                 # Maven memory settings
  DOCKER_IMAGE_NAME: calculator-service # Docker image name

# STEP 3: Define the jobs to run
jobs:
  
  # ============================================
  # JOB 1: BUILD AND TEST
  # ============================================
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest  # Use latest Ubuntu runner
    
    steps:
      # STEP 3.1: Checkout the code from repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better analysis
      
      # STEP 3.2: Set up Java 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'  # Eclipse Temurin (formerly AdoptOpenJDK)
          cache: 'maven'           # Cache Maven dependencies for faster builds
      
      # STEP 3.3: Build the application with Maven
      - name: Build with Maven
        run: ./mvnw clean package -DskipTests
      
      # STEP 3.4: Run unit tests
      - name: Run tests
        run: ./mvnw test
      
      # STEP 3.5: Generate test coverage report
      - name: Generate test coverage
        run: ./mvnw verify
      
      # STEP 3.6: Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/site/jacoco/
          retention-days: 30
      
      # STEP 3.7: Publish test summary
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true
      
      # STEP 3.8: Upload JAR artifact for later use
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: calculator-service-jar
          path: target/*.jar
          retention-days: 5  # Keep artifact for 5 days
  
  # ============================================
  # JOB 2: BUILD AND PUSH DOCKER IMAGE
  # ============================================
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test  # Only run if build-and-test succeeds
    # Only run on main/master branch (not on PRs)
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      # STEP 4.1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # STEP 4.2: Download JAR artifact from previous job
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: calculator-service-jar
          path: target/
      
      # STEP 4.3: Set up Docker Buildx (advanced Docker build features)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # STEP 4.4: Login to Docker Hub
      # NOTE: You need to add DOCKERHUB_USERNAME and DOCKERHUB_TOKEN to GitHub Secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # STEP 4.5: Extract metadata for Docker tags
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      # STEP 4.6: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-to: type=inline
      
      # STEP 4.7: Print image details
      - name: Image digest
        run: echo "${{ steps.meta.outputs.tags }}"

  # ============================================
  # JOB 3: SECURITY SCAN (Optional but recommended)
  # ============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      # STEP 5.1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # STEP 5.2: Set up Java
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'
      
      # STEP 5.3: Run dependency check for vulnerabilities
      - name: OWASP Dependency Check
        run: |
          ./mvnw dependency-check:check || true
          echo "Dependency check completed. Review the report in target/dependency-check-report.html"
