name: CI/CD - Oracle Cloud

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: -Xmx1024m
  DOCKER_IMAGE_NAME: calculator-service
  OCI_REGION: 'us-ashburn-1'  # Change to your region
  OKE_CLUSTER_NAMESPACE: 'calculator'

jobs:
  
  # ============================================
  # JOB 1: BUILD AND TEST
  # ============================================
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Build with Maven
        run: ./mvnw clean package -DskipTests
      
      - name: Run tests
        run: ./mvnw test
      
      - name: Generate test coverage
        run: ./mvnw verify
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/site/jacoco/
          retention-days: 30
      
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true
      
      - name: Add Coverage to PR
        if: github.event_name == 'pull_request'
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 50
          min-coverage-changed-files: 50
          title: 'ðŸ“Š Code Coverage Report'
          update-comment: true
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: calculator-service-jar
          path: target/*.jar
          retention-days: 5
  
  # ============================================
  # JOB 2: BUILD AND PUSH TO OCI REGISTRY
  # ============================================
  docker-build-push:
    name: Build and Push Docker Image to OCI Registry
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Generate image tags
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      # Login to Oracle Container Registry
      - name: Login to OCI Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.OCI_REGION }}.ocir.io
          username: ${{ secrets.OCI_TENANCY_NAMESPACE }}/${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_AUTH_TOKEN }}
      
      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64  # Support both x86 and ARM
      
      - name: Image digest
        run: echo "Image pushed with tags ${{ steps.meta.outputs.tags }}"
  
  # ============================================
  # JOB 3: DEPLOY TO ORACLE KUBERNETES (OKE)
  # ============================================
  deploy-to-oke:
    name: Deploy to Oracle Cloud Kubernetes
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Install OCI CLI
      - name: Install OCI CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH
      
      # Configure OCI CLI
      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CLI_CONFIG }}" > ~/.oci/config
          echo "${{ secrets.OCI_CLI_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
      
      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      # Get kubeconfig from OKE
      - name: Setup kubeconfig for OKE
        run: |
          oci ce cluster create-kubeconfig \
            --cluster-id ${{ secrets.OKE_CLUSTER_ID }} \
            --file $HOME/.kube/config \
            --region ${{ secrets.OCI_REGION }} \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT
      
      # Verify cluster connection
      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes
      
      # Create namespace if doesn't exist
      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.OKE_CLUSTER_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      
      # Update deployment with new image
      - name: Update deployment image
        run: |
          # Replace image placeholder in deployment-oracle.yaml
          sed -i "s|REPLACE_WITH_YOUR_REGION.ocir.io/REPLACE_WITH_YOUR_TENANCY/calculator-service:latest|${{ secrets.OCI_REGION }}.ocir.io/${{ secrets.OCI_TENANCY_NAMESPACE }}/calculator-service:latest|g" config/k8s/deployment-oracle.yaml
      
      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f config/k8s/namespace.yaml
          kubectl apply -f config/k8s/configmap.yaml
          kubectl apply -f config/k8s/deployment-oracle.yaml
      
      # Wait for rollout
      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/calculator-service -n ${{ env.OKE_CLUSTER_NAMESPACE }} --timeout=5m
      
      # Get deployment info
      - name: Get deployment information
        run: |
          echo "=== Pods ==="
          kubectl get pods -n ${{ env.OKE_CLUSTER_NAMESPACE }} -o wide
          
          echo "=== Services ==="
          kubectl get services -n ${{ env.OKE_CLUSTER_NAMESPACE }}
          
          echo "=== LoadBalancer IP ==="
          kubectl get service calculator-service -n ${{ env.OKE_CLUSTER_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      
      # Health check
      - name: Health check deployment
        run: |
          EXTERNAL_IP=$(kubectl get service calculator-service -n ${{ env.OKE_CLUSTER_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Deployment URL: http://$EXTERNAL_IP"
          
          # Wait for LoadBalancer IP
          counter=0
          while [ -z "$EXTERNAL_IP" ] && [ $counter -lt 30 ]; do
            echo "Waiting for LoadBalancer IP..."
            sleep 10
            EXTERNAL_IP=$(kubectl get service calculator-service -n ${{ env.OKE_CLUSTER_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            counter=$((counter+1))
          done
          
          if [ -n "$EXTERNAL_IP" ]; then
            echo "Testing health endpoint..."
            sleep 30  # Wait for service to be ready
            curl -f http://$EXTERNAL_IP/actuator/health || echo "Health check failed, but deployment completed"
          fi
  
  # ============================================
  # JOB 4: SECURITY SCAN (Optional)
  # ============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
